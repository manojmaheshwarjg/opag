
export const toolkits = [
    { 
        name: 'Airtable', 
        domain: 'airtable.com', 
        description: 'A cloud collaboration service for creating and sharing relational databases.',
        auth: ['API_KEY'],
        actions: [
            { name: 'create_record', description: 'Creates a new record in a table.' },
            { name: 'get_record', description: 'Retrieves a record by its ID.' },
            { name: 'update_record', description: 'Updates an existing record.' },
            { name: 'delete_record', description: 'Deletes a record.' },
            { name: 'list_records', description: 'Lists all records in a table.' },
        ],
        triggers: [
            { name: 'new_record', description: 'Triggers when a new record is created.', parameters: ['table'] },
            { name: 'record_updated', description: 'Triggers when a record is updated.', parameters: ['table'] },
        ]
    },
    { 
        name: 'Asana', 
        domain: 'asana.com', 
        description: 'A work management platform that helps teams organize, track, and manage their work.',
        auth: ['OAUTH2'],
        actions: [
            { name: 'create_task', description: 'Creates a new task.' },
            { name: 'get_task', description: 'Retrieves a task by its ID.' },
            { name: 'update_task', description: 'Updates an existing task.' },
            { name: 'delete_task', description: 'Deletes a task.' },
            { name: 'add_comment_to_task', description: 'Adds a comment to a task.' },
        ],
        triggers: [
            { name: 'new_task', description: 'Triggers when a new task is created.', parameters: ['project'] },
            { name: 'task_completed', description: 'Triggers when a task is marked as complete.', parameters: ['project'] },
        ]
    },
    { 
        name: 'GitHub', 
        domain: 'github.com', 
        description: 'A code hosting platform for version control and collaboration, offering Git-based... ',
        auth: ['OAUTH2'],
        actions: [
            { name: 'create_issue', description: 'Creates a new issue in a repository.' },
            { name: 'get_issue', description: 'Retrieves an issue by its number.' },
            { name: 'create_repository', description: 'Creates a new repository.' },
            { name: 'list_commits', description: 'Lists all commits in a repository.' },
        ],
        triggers: [
            { name: 'new_commit', description: 'Triggers on a new commit to a repository.', parameters: ['repository', 'branch'] },
            { name: 'new_issue', description: 'Triggers when a new issue is created.', parameters: ['repository'] },
            { name: 'new_pull_request', description: 'Triggers when a new pull request is created.', parameters: ['repository'] },
        ]
    },
    { 
        name: 'Slack', 
        domain: 'slack.com', 
        description: 'A channel-based messaging platform. With Slack, people can work together more effectively, connect all their software tools and services, and find the information they need to do their best work â€” all within a secure, enterprise-grade environment.',
        auth: ['OAUTH2', 'BEARER_TOKEN'],
        actions: [
            { name: 'add_reaction_to_message', description: 'Adds a specified emoji reaction to an existing message in a slack channel, identified by its timestamp; does not remove or retrieve reactions.' },
            { name: 'create_a_reminder', description: 'Creates a slack reminder with specified text and time; time accepts unix timestamps, seconds from now, or natural language (e.g., \'in 15 minutes\', \'every thursday at 2pm\').' },
            { name: 'fetch_conversation_history', description: 'Fetches a chronological list of messages and events from a specified slack conversation, accessible by the authenticated user/bot, with options for pagination and time range filtering.' },
            { name: 'list_conversations', description: 'Retrieves public channels, private channels, multi-person direct messages (mpims), and direct messages (ims) from a slack workspace, with options to filter by type and exclude archived channels.' },
            { name: 'list_all_slack_team_users_with_pagination', description: 'Retrieves a paginated list of all users, including comprehensive details, profile information, status, and team memberships, in a slack workspace; data may not be real-time.' },
            { name: 'remove_reaction_from_item', description: 'Removes an emoji reaction from a message, file, or file comment in slack.' },
            { name: 'schedule_message_in_chat', description: 'Schedules a message to a slack channel, dm, or private group for a future time (`post at`), requiring `text`, `blocks`, or `attachments` for content; scheduling is limited to 120 days in advance.' },
            { name: 'search_messages', description: 'Searches messages in a slack workspace using a query with optional modifiers (e.g., `in:`, `from:`, `has:`, `before:`) across accessible channels, dms, and private groups.' },
            { name: 'send_a_message_to_a_slack_channel', description: 'Posts a message to a slack channel, direct message, or private group; requires content via `text`, `blocks`, or `attachments`.' },
            { name: 'update_a_slack_message', description: 'Updates a slack message, identified by `channel` id and `ts` timestamp, by modifying its `text`, `attachments`, or `blocks`; provide at least one content field, noting `attachments`/`blocks` are replaced if included (`[]` clears them).' },
            { name: 'set_snooze_duration', description: 'Sets or updates the do not disturb (dnd) snooze duration in minutes for the authenticated user, pausing notifications immediately for the specified time.' },
            { name: 'add_an_emoji_alias', description: 'Adds an alias for an existing custom emoji in a slack enterprise grid organization.' },
            { name: 'add_a_custom_emoji_to_a_slack_team', description: 'Adds a custom emoji to a slack workspace given a unique name and an image url; subject to workspace emoji limits.' },
            { name: 'add_a_remote_file', description: 'Adds a reference to an external file (e.g., google drive, dropbox) to slack for discovery and sharing, requiring a unique `external id` and an `external url` accessible by slack.' },
            { name: 'add_a_star_to_an_item', description: 'Stars a channel, file, file comment, or a specific message in slack.' },
            { name: 'add_default_channels_to_idp_group', description: 'Adds channels to an idp user group\'s list of default channels, meaning new group members are automatically added to them; these channels supplement, and do not replace, any existing defaults.' },
            { name: 'add_enterprise_user_to_workspace', description: 'Assigns an existing enterprise user, not already in the target workspace, to a specific slack workspace within an enterprise grid organization, optionally adding them to channels and defining their guest status.' },
            { name: 'add_idp_group_allowlist_to_channel', description: 'Restricts access to a private slack channel to members of a specified idp group by linking the group to the channel\'s allowlist within an enterprise grid organization; `team id` is required for single-workspace channels, otherwise optional.' },
            { name: 'approve_admin_apps_request', description: 'Approves a pending app installation request within a slack workspace; requires admin privileges.' },
            { name: 'approve_invite_request_for_team', description: 'Approves an existing, pending invite request for a slack workspace; this action is irreversible.' },
            { name: 'list_app_permissions', description: 'Retrieves permissions for the app. Use `list app permissions on a team` instead.', deprecated: true },
            { name: 'list_app_permissions_scopes', description: 'Retrieves oauth scopes for the authenticated slack app. Use `list app permissions scopes on a team` instead.', deprecated: true },
            { name: 'archive_a_public_or_private_channel', description: 'Archives a slack public or private channel, making it read-only; the primary \'general\' channel cannot be archived.' },
            { name: 'archive_a_slack_conversation', description: 'Archives a slack conversation by its id, rendering it read-only and hidden while retaining history, ideal for cleaning up inactive channels; be aware that some channels (like #general or certain dms) cannot be archived and this may impact connected integrations.' },
            { name: 'associate_default_workspaces_with_an_idp_group', description: 'Associates specified slack workspaces (teams) with an existing idp user group as its default workspaces, requiring all workspaces and the group to be within the same organization.' },
            { name: 'post_message_to_channel', description: 'Posts a message to a slack channel, direct message, or private channel. Use `sends a message to a slack channel` instead.', deprecated: true },
            { name: 'test_api_call', description: 'Calls slack\'s `api.test` method to check api status, optionally specifying an error to trigger or an arbitrary parameter to echo.' },
            { name: 'check_authentication_and_identity', description: 'Use to validate the current authentication token and get basic identity (user/bot, team) information; it does not return token scopes.' },
            { name: 'close_conversation_channel', description: 'Closes a slack direct message (dm) or multi-person direct message (mpdm) channel, removing it from the user\'s sidebar without deleting history; this action affects only the calling user\'s view.' },
            { name: 'retrieve_conversation_history', description: 'Retrieves message history from a slack conversation accessible by the authenticated user/bot, with pagination and time filtering. Use `fetch conversation history`.', deprecated: true },
            { name: 'get_conversation_info', description: 'Retrieves metadata (name, purpose, creation date) for a slack conversation, excluding messages. Use `retrieve conversation information`.', deprecated: true },
            { name: 'list_conversations_deprecated', description: 'Retrieves public channels, private channels, mpims, and ims from a slack workspace. Use `list all slack team channels with various filters` instead.', deprecated: true },
            { name: 'convert_channel_to_private', description: 'Converts a public channel to private; this is irreversible and the channel must already exist.' },
            { name: 'create_an_enterprise_team', description: 'Creates a new team within a slack enterprise grid organization; the organization must be on an enterprise grid plan.' },
            { name: 'create_a_slack_user_group', description: 'Creates a new user group (often referred to as a subteam) in a slack workspace.' },
            { name: 'create_a_channel_based_conversation', description: 'Creates a new public or private slack channel with a unique name; the channel can be org-wide, or team-specific if `team id` is given (required if `org wide` is false or not provided).' },
            { name: 'customize_url_unfurling_in_messages', description: 'Customizes url previews (unfurling) in a specific slack message using a url-encoded json in `unfurls` to define custom content or remove existing previews.' },
            { name: 'delete_a_message_from_a_chat', description: 'Deletes a message, identified by its channel id and timestamp, from a slack channel, private group, or direct message conversation; the authenticated user or bot must be the original poster.' },
            { name: 'delete_file_comment', description: 'Deletes a specific comment from a file in slack; this action is irreversible.' },
            { name: 'delete_a_file_by_id', description: 'Permanently deletes an existing file from a slack workspace using its unique file id; this action is irreversible and also removes any associated comments or shares.' },
            { name: 'delete_a_public_or_private_channel', description: 'Permanently and irreversibly deletes a specified public or private channel, including all its messages and files, within a slack enterprise grid organization.' },
            { name: 'delete_scheduled_chat_message', description: 'Deletes a pending, unsent scheduled message from the specified slack channel, identified by its `scheduled message id`.' },
            { name: 'delete_a_slack_reminder', description: 'Deletes an existing slack reminder, typically when it is no longer relevant or a task is completed; this operation is irreversible.' },
            { name: 'delete_user_profile_photo', description: 'Deletes the slack profile photo for the user identified by the token, reverting them to the default avatar; this action is irreversible and succeeds even if no custom photo was set.' },
            { name: 'deny_workspace_invite_request', description: 'Denies a pending slack workspace invite request that is currently active; this action is irreversible.' },
            { name: 'disable_a_slack_user_group', description: 'Disables a specified, currently enabled slack user group by its unique id, effectively archiving it by setting its \'date delete\' timestamp; the group is not permanently deleted and can be re-enabled.' },
            { name: 'disconnect_channel_from_workspaces', description: 'Disconnects a shared channel within a slack enterprise grid from specified, currently connected, workspace(s), permanently altering its sharing settings; not applicable to dms.' },
            { name: 'enable_a_user_group', description: 'Enables a disabled user group in slack using its id, reactivating it for mentions and permissions; this action only changes the enabled status and cannot create new groups or modify other properties.' },
            { name: 'share_file_public_url', description: 'Enables public sharing for an existing slack file by generating a publicly accessible url; this action does not create new files.' },
            { name: 'end_a_call', description: 'Ends an ongoing slack call, identified by its id (obtained from `calls.add`), optionally specifying the call\'s duration.' },
            { name: 'end_dnd_session', description: 'Ends the authenticated user\'s current do not disturb (dnd) session in slack, affecting only dnd status and making them available; if dnd is not active, slack acknowledges the request without changing status.' },
            { name: 'end_user_dnd_snooze', description: 'Immediately ends the user\'s active do not disturb (dnd) snooze in slack, allowing them to resume receiving notifications.' },
            { name: 'exchange_oauth_code_for_access_token', description: 'Exchanges a temporary, single-use slack oauth `code` for an access token; used in the oauth flow and does not require a pre-existing api token.' },
            { name: 'retrieve_oauth_token', description: 'Exchanges a temporary slack authorization code, obtained via oauth callback, for a workspace access token.' },
            { name: 'oauth_v2_access_endpoint', description: 'Call this action to complete the slack oauth 2.0 flow by exchanging a temporary authorization `code` and client credentials for an access token, providing the original `redirect uri` if it was used in the initial authorization step.' },
            { name: 'fetch_bot_user_information', description: 'Fetches information for a specified, existing slack bot user; will not work for regular user accounts or other integration types.' },
            { name: 'fetch_team_information', description: 'Fetches comprehensive metadata about the current slack team, or a specified team if the provided id is accessible.' },
            { name: 'fetch_dnd_status_for_multiple_team_members', description: 'Fetches the do not disturb (dnd) status for a comma-separated list of specified slack user ids.' },
            { name: 'fetch_item_reactions', description: 'Fetches reactions for a slack message, file, or file comment, requiring one of: channel and timestamp; file id; or file comment id.' },
            { name: 'retrieve_conversation_replies', description: 'Retrieves replies to a specific parent message in a slack conversation, using the channel id and the parent message\'s timestamp (`ts`).' },
            { name: 'fetch_workspace_settings_information', description: 'Retrieves detailed settings for a specific slack workspace, primarily for administrators in an enterprise grid organization to view or audit workspace configurations.' },
            { name: 'lookup_users_by_email', description: 'Retrieves the slack user object for an active user by their registered email address; fails with \'users not found\' if the email is unregistered or the user is inactive.' },
            { name: 'get_billable_team_user_info', description: 'Retrieves billable status (not amounts or settings) for users in a slack team; only provides meaningful data if billing features are active on the workspace.' },
            { name: 'get_channel_conversation_preferences', description: 'Retrieves conversation preferences (e.g., who can post, who can thread) for a specified channel, primarily for use within slack enterprise grid environments.' },
            { name: 'get_admin_conversations_teams', description: 'For slack enterprise grid, retrieves workspace ids connected to a given channel, typically for administrators to audit multi-workspace channel access.' },
            { name: 'get_current_team_integration_logs', description: 'Fetches potentially delayed integration activity logs for the current slack team, filterable by app, change type, service, or user, to audit integration activities.' },
            { name: 'get_current_team_access_logs', description: 'Retrieves paginated access logs for the current slack team, detailing user login events for security auditing and monitoring workspace access, typically requiring admin privileges and a supporting slack plan.' },
            { name: 'get_reminder_information', description: 'Retrieves detailed information for an existing slack reminder specified by its id; this is a read-only operation.' },
            { name: 'retrieve_user_presence', description: 'Retrieves a slack user\'s current real-time presence (e.g., \'active\', \'away\') to determine their availability, noting this action does not provide historical data or status reasons.' },
            { name: 'indicate_workflow_step_failure', description: 'Signals to slack that an identified workflow step (`workflow step execute id`) of an active custom workflow has failed, providing an error message; this action only reports the failure and does not attempt to retry or resolve it.' },
            { name: 'create_a_channel', description: 'Creates a new, uniquely named public or private channel in slack.' },
            { name: 'invalidate_a_user_session_by_id', description: 'Forcibly terminates a specific user\'s active slack session, identified by `session id` within the specified `team id`, mainly for administrative security needs like immediate access revocation when other methods are inadequate.' },
            { name: 'invite_users_to_a_slack_channel', description: 'Invites users to an existing slack channel using their valid slack user ids.' },
            { name: 'invite_users_to_channel', description: 'Invites users to a specified slack channel; this action is restricted to enterprise grid workspaces and requires the authenticated user to be a member of the target channel.' },
            { name: 'invite_user_to_workspace_and_channels', description: 'Invites a user to a slack workspace and specified channels by email; use `resend=true` to re-process an existing invitation for a user not yet signed up.' },
            { name: 'join_conversation_by_channel_id', description: 'Joins an existing slack conversation (public channel, private channel, or multi-person direct message) by its id, if the authenticated user has permission.' },
            { name: 'leave_conversation_channel', description: 'Leaves a slack conversation given its channel id; fails if leaving as the last member of a private channel or if used on a slack connect channel.' },
            { name: 'list_pinned_items_in_a_channel', description: 'Retrieves all messages and files pinned to a specified channel; the caller must have access to this channel.' },
            { name: 'list_user_s_starred_items', description: 'Lists all authenticated user\'s starred items (messages, files, comments, channels, dms, groups) in slack, with pagination.' },
            { name: 'list_accessible_conversations_for_a_user', description: 'Retrieves conversations accessible to a specified user (or the authenticated user if no user id is provided), respecting shared membership for non-public channels.' },
            { name: 'list_all_teams_in_an_enterprise_organization', description: 'Lists all teams (workspaces) within a slack enterprise grid organization for auditing, management, or reporting.' },
            { name: 'list_all_users_in_a_user_group', description: 'Retrieves a list of all user ids within a specified slack user group, with an option to include users from disabled groups.' },
            { name: 'list_approved_apps_for_org_or_workspace', description: 'Fetches a paginated list of approved applications for a slack workspace (using `team id`) or an enterprise grid organization (using `enterprise id`); if neither id is specified, the scope depends on the authentication context.' },
            { name: 'list_approved_workspace_invite_requests', description: 'Lists approved invite requests for a slack workspace; if `team id` is omitted, requests are listed based on the token\'s default scope or primary workspace.' },
            { name: 'list_app_permissions_on_a_team', description: 'Retrieves a list of permissions and resources granted to the slack application associated with the token.' },
            { name: 'list_app_permissions_scopes_on_a_team', description: 'Retrieves all oauth scopes (bot and user token) granted to the authenticated slack app on the current team.' },
            { name: 'list_app_resource_grants_on_a_team', description: 'Lists resources (e.g., channels, users) the authenticated slack app can access in the workspace, noting the list is filtered by the app\'s current authentication scopes.' },
            { name: 'list_app_user_grants_and_scopes_on_team', description: 'Lists oauth grants and scopes users on a slack team approved for the calling application.' },
            { name: 'list_denied_invite_requests', description: 'Retrieves a list of all invite requests that have been *denied* for a slack workspace, primarily for auditing or reviewing past access decisions.' },
            { name: 'list_ekm_original_connected_channel_info', description: 'Lists original connected channel information for specified enterprise key management (ekm) enabled channels, particularly disconnected or frozen ones, within an ekm-enabled slack workspace.' },
            { name: 'list_enterprise_grid_organization_emojis', description: 'Retrieves a paginated list of all user-created custom emojis for a slack enterprise grid organization.' },
            { name: 'list_event_authorizations_for_apps', description: 'Lists app installations authorized for a given slack event context, to determine app visibility for that event.' },
            { name: 'list_slack_files', description: 'Lists files and their metadata within a slack workspace, filterable by user, channel, timestamp, or type; this action returns metadata only, not file content.' },
            { name: 'list_idp_groups_linked_to_a_channel', description: 'Lists identity provider (idp) group ids linked to a private slack channel; `team id` is required if the channel is not organization-wide.' },
            { name: 'list_user_group_channels', description: 'Lists channels linked to an identity provider (idp) user group, optionally for a specific team if the token accesses multiple teams in an enterprise grid.' },
            { name: 'list_pending_workspace_invite_requests', description: 'Retrieves a list of all pending invite requests for a slack workspace, primarily for administrators to manage outstanding invitations.' },
            { name: 'list_restricted_apps', description: 'Lists applications restricted from installation within a specific slack workspace (using `team id`) or an entire enterprise grid organization (using `enterprise id`).' },
            { name: 'list_scheduled_messages_in_a_channel', description: 'Retrieves a list of pending (not yet delivered) messages scheduled in a specific slack channel, or across all accessible channels if no channel id is provided, optionally filtered by time and paginated.' },
            { name: 'list_remote_files', description: 'Lists metadata (not content) for remote files shared in a slack workspace, with support for filtering and pagination.' },
            { name: 'list_team_custom_emojis', description: 'Retrieves all custom emojis for the slack workspace (image urls or aliases), not standard unicode emojis; does not include usage statistics or creation dates.' },
            { name: 'list_team_workspace_app_requests', description: 'Retrieves a list of app installation requests for a slack workspace or enterprise grid organization.' },
            { name: 'list_user_groups', description: 'Lists user groups in a slack workspace, including user-created and default groups; results for large workspaces may be paginated.' },
            { name: 'list_user_reactions', description: 'Lists all reactions added by a specific user to messages, files, or file comments in slack, useful for engagement analysis when the item content itself is not required.' },
            { name: 'list_user_reminders_with_details', description: 'Lists all reminders with their details for the authenticated slack user; returns an empty list if no reminders exist.' },
            { name: 'list_workspace_admins', description: 'Lists all administrator user ids for a given slack workspace (team id), which must be part of an enterprise grid organization.' },
            { name: 'list_workspace_owners', description: 'Lists the owners of a specific slack workspace (team id) that is part of an enterprise grid organization.' },
            { name: 'list_admin_users', description: 'Retrieves a paginated list of admin users for a specified slack workspace.' },
            { name: 'set_user_presence', description: 'Manually sets a user\'s slack presence, overriding automatic detection; this setting persists across connections but can be overridden by user actions or slack\'s auto-away (e.g., after 10 mins of inactivity).' },
            { name: 'map_user_ids_for_enterprise_grid_workspaces', description: 'Converts slack user ids between workspace-specific (e.g., u12345) and global enterprise grid (e.g., wabcdef) formats; defaults to converting \'u\' ids to \'w\' ids, set `to old=true` to convert \'w\' ids to \'u\' ids.' },
            { name: 'mark_user_as_active', description: 'Marks the authenticated user as active, typically when they return from inactivity.', deprecated: true },
            { name: 'mark_reminder_as_complete', description: 'Marks a specific slack reminder as complete using its `reminder` id; this slack api endpoint (\'reminders.complete\') was deprecated in march 2023 and is not recommended for new applications.', deprecated: true },
            { name: 'mark_workflow_step_as_completed', description: 'Marks an active slack workflow step as completed via its `workflow step execute id` when its execution has successfully concluded, optionally providing json outputs for subsequent steps; this action only updates the step\'s status and does not execute the step itself.' },
            { name: 'open_a_view_for_a_slack_user', description: 'Opens a modal view for a slack user in response to an interaction.' },
            { name: 'open_or_resume_direct_or_multi_person_messages', description: 'Opens or resumes a slack direct message (dm) or multi-person direct message (mpim) by providing either user ids or an existing channel id.' },
            { name: 'open_user_dialog', description: 'Opens an interactive slack dialog modal to collect user information or display complex content, defined by a valid slack `dialog` json, using a `trigger id` from a recent user interaction (valid for only 3 seconds).', deprecated: true },
            { name: 'pin_an_item_to_a_channel', description: 'Pins a message to a specified slack channel; the message must not already be pinned.' },
            { name: 'promote_user_to_admin_status', description: 'Promotes a user to an admin in a slack enterprise grid workspace, provided the user is not the primary owner.' },
            { name: 'promote_user_to_workspace_owner', description: 'Promotes a user to a workspace owner within a slack enterprise grid organization; this action is irreversible through the api.' },
            { name: 'publish_static_view_for_user', description: 'Publishes or updates the home tab view for a specified user in slack; this cannot be used for modals or messages.' },
            { name: 'push_view_to_root_view_stack', description: 'Pushes a new view onto an existing view stack in a slack modal or home tab for dynamic multi-step interactions; view stack depth is limited (e.g., typically 3 for modals).' },
            { name: 'register_a_new_call_with_participants', description: 'Registers a new call in slack using `calls.add` for third-party call integration; `created by` is required if not using a user-specific token.' },
            { name: 'add_participants_to_call', description: 'Adds new participants (specified in `users` json with `slack id`/`external id`) to an ongoing slack call identified by its `id` (from `calls.add`).' },
            { name: 'remove_participants_from_call', description: 'Removes specified participants from an active slack call; removal is irreversible and the call persists even if empty.' },
            { name: 'remove_remote_file', description: 'Removes the slack reference to an external file (which must have been previously added via the remote files api), specified by either its `external id` or `file` id (one of which is required), without deleting the actual external file.' },
            { name: 'remove_a_star_from_an_item', description: 'Removes a star from a previously starred slack item (message, file, file comment, channel, group, or dm), requiring identification via `file`, `file comment`, `channel` (for channel/group/dm), or both `channel` and `timestamp` (for a message).' },
            { name: 'remove_user_from_conversation', description: 'Removes a specified user from a slack conversation (channel); the caller must have permissions to remove users and cannot remove themselves using this action.' },
            { name: 'remove_channels_from_idp_group', description: 'Disassociates channels from an idp group; this action does not delete the channels or the group itself and may affect user access.' },
            { name: 'remove_enterprise_grid_org_emoji', description: 'Removes an existing custom emoji, specified by its name, from a slack enterprise grid organization, rendering it unavailable across all associated workspaces; this action is permanent and cannot be undone.' },
            { name: 'remove_idp_group_from_private_channel', description: 'Unlinks an already-linked identity provider (idp) group from a private slack channel to revoke its members\' access; specify `team id` if the channel is not shared across an organization.' },
            { name: 'remove_user_from_workspace', description: 'Irreversibly removes a user from a slack workspace, permanently revoking their access; back up user data beforehand if needed as this action does not preserve it.' },
            { name: 'rename_an_emoji', description: 'Renames an existing custom emoji in a slack workspace, updating all its instances.' },
            { name: 'rename_a_conversation', description: 'Renames a slack channel, automatically adjusting the new name to meet naming conventions (e.g., converting to lowercase), which may affect integrations using the old name.' },
            { name: 'rename_a_slack_channel', description: 'Renames a public or private slack channel; for enterprise grid workspaces, the user must be a workspace admin or channel manager.' },
            { name: 'request_additional_app_permissions', description: 'Requests additional oauth `scopes` for a slack app, initiating an approval process with workspace administrators rather than granting permissions directly; requires a `trigger id` from a recent user interaction.' },
            { name: 'restrict_app_installation', description: 'Restricts an app (using `app id` and `team id`) or a pending app installation request (using `request id`) in a slack workspace.' },
            { name: 'retrieve_a_user_s_identity_details', description: 'Retrieves the authenticated user\'s and their team\'s identity, with details varying based on oauth scopes (e.g., `identity.basic`, `identity.email`, `identity.avatar`).' },
            { name: 'retrieve_call_information', description: 'Retrieves a point-in-time snapshot of a specific slack call\'s information.' },
            { name: 'retrieve_conversation_information', description: 'Retrieves metadata for a slack conversation by id (e.g., name, purpose, creation date, with options for member count/locale), excluding message content; requires a valid channel id.' },
            { name: 'get_conversation_members', description: 'Retrieves a paginated list of active member ids for a specified slack public channel, private channel, direct message (dm), or multi-person direct message (mpim).' },
            { name: 'retrieve_user_dnd_status', description: 'Retrieves a slack user\'s current do not disturb (dnd) status to determine their availability before interaction; any specified user id must be a valid slack user id.' },
            { name: 'retrieve_detailed_file_information', description: 'Retrieves detailed metadata and paginated comments for a specific slack file id; does not download file content.' },
            { name: 'retrieve_detailed_user_information', description: 'Retrieves comprehensive information for a valid slack user id, excluding message history and channel memberships.' },
            { name: 'retrieve_message_permalink', description: 'Retrieves a permalink url for a specific message in a slack channel or conversation; the permalink respects slack\'s privacy settings.' },
            { name: 'get_remote_file_info', description: 'Fetches metadata and slack-specific status (like sharing status and permissions) for an externally hosted file that has been previously added/shared to slack, using either its unique slack file id or a creator-defined external guid.' },
            { name: 'retrieve_team_profile_details', description: 'Retrieves all profile field definitions for a slack team, optionally filtered by visibility, to understand the team\'s profile structure.' },
            { name: 'retrieve_user_profile_information', description: 'Retrieves profile information for a specified slack user (defaults to the authenticated user if `user` id is omitted); a provided `user` id must be valid.' },
            { name: 'unarchive_conversation', description: 'Unarchives an existing, archived slack conversation using its channel id; this may affect workspace channel limits.' },
            { name: 'revoke_authentication_token', description: 'Permanently revokes the currently authenticated access token, for use cases such as user logout or if a token is suspected to be compromised; the `test` request parameter allows simulating revocation.' },
            { name: 'revoke_a_file_s_public_url', description: 'Revokes a slack file\'s public url, making it private; this is a no-op if not already public and is irreversible.' },
            { name: 'search_admin_conversations', description: 'Searches for channels available to an administrator within a slack enterprise grid organization.' },
            { name: 'search_messages_deprecated', description: 'Searches messages in a slack workspace. Use `search for messages with query` for current functionality.', deprecated: true },
            { name: 'post_ephemeral_message_to_user_in_channel', description: 'Sends a temporary, private message, visible only to a specified user within a channel, where the user must be a member of the channel; if posting as a bot (`as user` is false), the bot also must be a member.' },
            { name: 'set_a_conversation_s_purpose', description: 'Sets the purpose (a short description of its topic/goal, displayed in the header) for a slack conversation; the calling user must be a member.' },
            { name: 'set_channel_conversation_preferences', description: 'Sets posting permissions and other preferences for a slack channel via a stringified json object.' },
            { name: 'set_expiration_for_a_guest_user', description: 'Sets a future expiration unix timestamp for a guest user\'s account; not applicable to regular members.' },
            { name: 'set_conversation_read_cursor', description: 'Marks a message, specified by its timestamp (`ts`), as the most recently read for the authenticated user in the given `channel`, provided the user is a member of the channel and the message exists within it.' },
            { name: 'set_slack_user_profile_information', description: 'Updates a slack user\'s profile, setting either individual fields or multiple fields via a json object.' },
            { name: 'set_conversation_topic', description: 'Sets or updates the topic for a specified slack conversation.' },
            { name: 'set_user_profile_photo_with_cropping_options', description: 'Sets a user\'s slack profile photo using an image file (required); if cropping, `crop x`, `crop y`, and `crop w` must all be specified.' },
            { name: 'set_user_to_regular_status', description: 'Sets a user to \'regular\' in a slack enterprise grid workspace, typically to downgrade from an elevated role; the api does not return the user\'s previous role.' },
            { name: 'set_workspace_connections_for_a_channel', description: 'Shares a channel with specified workspaces (using `target team ids`) or converts it to an organization-wide channel (if `org channel` is true, `target team ids` must not be provided) in a slack enterprise grid.' },
            { name: 'set_workspace_default_channels', description: 'Sets default public channels for new members in a slack workspace; channels must be existing and within this workspace.' },
            { name: 'set_workspace_description', description: 'Updates the description for a specified slack workspace, overwriting any existing description.' },
            { name: 'set_workspace_discoverability_settings', description: 'Sets the discoverability for a slack workspace within an enterprise grid organization.' },
            { name: 'set_workspace_icon', description: 'Sets or updates the icon for a specific slack workspace within an enterprise grid organization.' },
            { name: 'set_workspace_name', description: 'Updates the name of a slack workspace for a given `team id`; the `team id` must refer to a valid and existing slack workspace.' },
            { name: 'share_a_me_message_in_a_channel', description: 'Sends a \'me message\' (e.g., \'/me is typing\') to a slack channel, where it\'s displayed as a third-person user action; messages are plain text and the channel must exist and be accessible.' },
            { name: 'share_a_remote_file_in_channels', description: 'Shares a remote file, which must already be registered with slack, into specified slack channels or direct message conversations.' },
            { name: 'start_real_time_messaging_session', description: 'Initiates a slack rtm session providing a single-use websocket url (valid 30s) for event streaming; does not set initial presence status.' },
            { name: 'trigger_user_permissions_modal', description: 'Displays a permissions modal to a specified slack user to request additional user-level oauth scopes for the app, requiring a valid `trigger id` from a recent user interaction.' },
            { name: 'unarchive_a_public_or_private_channel', description: 'Unarchives a specified public or private slack channel that is currently archived, using its channel id.' },
            { name: 'uninstall_app_from_workspace', description: 'Uninstalls a currently installed slack app from a workspace or enterprise organization by revoking all its tokens; this action is irreversible.' },
            { name: 'unpin_message_from_channel', description: 'Unpins a message, identified by its timestamp, from a specified channel if the message is currently pinned there; this operation is destructive.' },
            { name: 'update_an_existing_remote_file', description: 'Updates metadata or content details for an existing remote file in slack; this action cannot upload new files or change the fundamental file type.' },
            { name: 'update_slack_user_group', description: 'Updates an existing slack user group, which must be specified by an existing `usergroup` id, with new optional details such as its name, description, handle, or default channels.' },
            { name: 'update_an_existing_slack_view', description: 'Updates an existing slack view (e.g., a modal or home tab) with a new view definition.' },
            { name: 'update_call_information', description: 'Updates the title, join url, or desktop app join url for an existing slack call identified by its id.' },
            { name: 'update_user_group_members', description: 'Replaces all members of an existing slack user group with a new list of valid user ids.' },
            { name: 'update_workflow_extension_step_configuration', description: 'Updates a slack workflow step\'s configuration (inputs, outputs, name, or image) using `workflow step edit id` from a `view submission` payload; `inputs` and `outputs` must be valid json strings conforming to slack\'s structure if provided.' },
            { name: 'upload_or_create_a_file_in_slack', description: 'Uploads a file to slack, requiring either `content` (for text) or `file` (for binary data), optionally sharing it in specified `channels` or as a reply via `thread ts`.' },
            { name: 'get_user_information', description: 'Fetches detailed information (excluding message history or channel memberships) for a specific slack user. Use retrieve detailed user information.', deprecated: true },
            { name: 'list_users', description: 'Retrieves all users in a slack workspace; use `list all slack team users with pagination` instead for current functionality and pagination.', deprecated: true },
            { name: 'wipe_user_sessions', description: 'Invalidates a slack user\'s active sessions (user id must exist) forcing re-authentication: set `mobile only=true` to target mobile, `web only=true` to target web.' },
        ],
        triggers: [
            { name: 'new_channel_created', description: 'Triggered when a new channel is created in Slack.' },
            { name: 'reaction_added', description: 'Triggered when a new message is posted to a Slack channel.' },
            { name: 'reaction_removed', description: 'Triggered when a reaction is removed from a message.' },
            { name: 'new_bot_message_received', description: 'Triggered when a new bot message is posted to a Slack channel.' },
            { name: 'new_direct_message_received', description: 'Triggered when a new direct message (DM) is sent to a user in Slack.' },
            { name: 'new_private_channel_message_received', description: 'Triggered when a new message is posted to a private channel in Slack.' },
            { name: 'new_message_received', description: 'Triggered when a new message is posted to a Slack channel.' },
            { name: 'new_multi_person_direct_message_received', description: 'Triggered when a new message is posted to a multi-person direct message in Slack.' },
            { name: 'thread_reply_received', description: 'Triggered when reply is added to a message in a thread. Excludes the parent message_replied event by design (ts != thread_ts).' },
        ]
    },
    { 
        name: 'Jira', 
        domain: 'atlassian.com', 
        description: 'A proprietary issue tracking product that allows bug tracking and agile project management.',
        auth: ['OAUTH2', 'API_KEY'],
        actions: [
            { name: 'create_ticket', description: 'Creates a new ticket.' },
            { name: 'get_ticket', description: 'Retrieves a ticket by its ID.' },
            { name: 'update_ticket', description: 'Updates an existing ticket.' },
            { name: 'add_comment', description: 'Adds a comment to a ticket.' },
        ],
        triggers: [
            { name: 'new_ticket', description: 'Triggers when a new ticket is created.', parameters: ['project'] },
            { name: 'ticket_status_changed', description: 'Triggers when a ticket\'s status changes.', parameters: ['project'] },
        ]
    },
    { 
        name: 'Google Drive', 
        domain: 'google.com', 
        description: 'A file storage and synchronization service developed by Google.',
        auth: ['OAUTH2'],
        actions: [
            { name: 'upload_file', description: 'Uploads a file.' },
            { name: 'create_folder', description: 'Creates a new folder.' },
            { name: 'share_file', description: 'Shares a file with specified users.' },
        ],
        triggers: [
            { name: 'new_file', description: 'Triggers when a new file is added.', parameters: ['folder'] },
            { name: 'file_updated', description: 'Triggers when a file is updated.', parameters: ['file'] },
        ]
    },
    { name: 'AWS S3', description: 'Object storage service offering industry-leading scalability, data availability, security, and performance.', domain: 'aws.amazon.com', auth: ['API_KEY'], actions: [], triggers: [] },
    { name: 'Box', description: 'A cloud content management and file sharing service for businesses.', domain: 'box.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Calendly', description: 'An automated scheduling tool for arranging meetings, appointments, and events.', domain: 'calendly.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'ClickUp', description: 'A cloud-based collaboration and project management tool.', domain: 'clickup.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Confluence', description: 'A web-based corporate wiki developed by Australian software company Atlassian.', domain: 'atlassian.com', auth: ['OAUTH2', 'API_KEY'], actions: [], triggers: [] },
    { name: 'Datadog', description: 'An observability service for cloud-scale applications, providing monitoring of servers, databases, tools, and services.', domain: 'datadoghq.com', auth: ['API_KEY'], actions: [], triggers: [] },
    { name: 'Discord', description: 'A VoIP, instant messaging and digital distribution platform designed for creating communities.', domain: 'discord.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Dropbox', description: 'A file hosting service that offers cloud storage, file synchronization, personal cloud, and client software.', domain: 'dropbox.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Docusign', description: 'Allows organizations to manage electronic agreements.', domain: 'docusign.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Evernote', description: 'An app designed for note taking, organizing, task management, and archiving.', domain: 'evernote.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Facebook Ads', description: 'A service for creating and managing advertisements on the Facebook platform.', domain: 'facebook.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Figma', description: 'A collaborative web application for interface design.', domain: 'figma.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Freshdesk', description: 'A cloud-based customer support platform.', domain: 'freshdesk.com', auth: ['API_KEY'], actions: [], triggers: [] },
    { name: 'GitLab', description: 'A web-based DevOps lifecycle tool that provides a Git-repository manager.', domain: 'gitlab.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Gmail', description: 'Google\'s email service, featuring spam protection, search functions, and seamless...', domain: 'google.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Google Calendar', description: 'A time-management and scheduling calendar service developed by Google.', domain: 'google.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Google Ads', description: 'An online advertising platform developed by Google.', domain: 'google.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Google Sheets', description: 'A cloud-based spreadsheet tool enabling real-time collaboration, data analysis,...', domain: 'google.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'HubSpot', description: 'An inbound marketing, sales, and customer service platform integrating CRM, email...', domain: 'hubspot.com', auth: ['OAUTH2', 'API_KEY'], actions: [], triggers: [] },
    { name: 'Intercom', description: 'A customer communications platform.', domain: 'intercom.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'LinkedIn', description: 'A business and employment-oriented online service.', domain: 'linkedin.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Mailchimp', description: 'An all-in-one marketing platform for small businesses.', domain: 'mailchimp.com', auth: ['OAUTH2', 'API_KEY'], actions: [], triggers: [] },
    { name: 'Microsoft Teams', description: 'A proprietary business communication platform developed by Microsoft.', domain: 'microsoft.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Miro', description: 'An online collaborative whiteboard platform.', domain: 'miro.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Monday.com', description: 'A work operating system that powers teams to run projects and workflows with confidence.', domain: 'monday.com', auth: ['API_KEY'], actions: [], triggers: [] },
    { name: 'Notion', description: 'Notion centralizes notes, docs, wikis, and tasks in a unified workspace, letting teams build custom...', domain: 'notion.so', auth: ['OAUTH2', 'API_KEY'], actions: [], triggers: [] },
    { name: 'OneDrive', description: 'A file hosting service and synchronization service from Microsoft.', domain: 'microsoft.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Outlook', description: 'A personal information manager web app from Microsoft.', domain: 'microsoft.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'PagerDuty', description: 'An incident response platform for IT departments.', domain: 'pagerduty.com', auth: ['API_KEY'], actions: [], triggers: [] },
    { name: 'PayPal', description: 'An online payments system that supports online money transfers.', domain: 'paypal.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'QuickBooks', description: 'An accounting software package developed and marketed by Intuit.', domain: 'intuit.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Salesforce', description: 'A customer relationship management solution that brings companies and customers together.', domain: 'salesforce.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'SendGrid', description: 'A cloud-based SMTP provider that allows you to send email without having to maintain email servers.', domain: 'sendgrid.com', auth: ['API_KEY'], actions: [], triggers: [] },
    { name: 'Shopify', description: 'An e-commerce platform enabling merchants to create online stores, manage...', domain: 'shopify.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Smartsheet', description: 'A software as a service offering for collaboration and work management.', domain: 'smartsheet.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Stripe', description: 'A suite of payment APIs that powers commerce for online businesses of all sizes.', domain: 'stripe.com', auth: ['API_KEY'], actions: [], triggers: [] },
    { name: 'Trello', description: 'A list-making application that organizes your projects into boards.', domain: 'trello.com', auth: ['OAUTH2', 'API_KEY'], actions: [], triggers: [] },
    { name: 'Twilio', description: 'A cloud communications platform as a service company.', domain: 'twilio.com', auth: ['API_KEY'], actions: [], triggers: [] },
    { name: 'Typeform', description: 'An online software as a service company that specializes in online form building and online surveys.', domain: 'typeform.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Wix', description: 'A cloud-based web development platform.', domain: 'wix.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Xero', description: 'A cloud-based accounting software platform for small and medium-sized businesses.', domain: 'xero.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'YouTube', description: 'An online video-sharing and social media platform owned by Google.', domain: 'youtube.com', auth: ['OAUTH2'], actions: [], triggers: [] },
    { name: 'Zapier', description: 'A tool that helps you automate repetitive tasks between two or more apps.', domain: 'zapier.com', auth: ['API_KEY'], actions: [], triggers: [] },
    { name: 'Zendesk', description: 'A service-first CRM company that builds software designed to improve customer relationships.', domain: 'zendesk.com', auth: ['OAUTH2', 'API_KEY'], actions: [], triggers: [] },
    { name: 'Zoom', description: 'A proprietary videotelephony software program developed by Zoom Video Communications.', domain: 'zoom.us', auth: ['OAUTH2'], actions: [], triggers: [] },
];

export const getToolkit = (name: string) => toolkits.find(t => t.name === name);

    

    

    

    